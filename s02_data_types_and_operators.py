# -*- coding: utf-8 -*-
"""S02 - Data Types and Operators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ux8pTguF7RoJbiGLFRuL-GtovPrjCfxv

## Data Types

**Primary types**

* Text type:  `str`
* Numeric Types: `int`, `float`, `complex`
* Boolean Type: `bool`

**Types for more than one value**

* Sequence Types: `list`, `tuple`, `ranage`
* Mapping Type: `dict`
* Set Types: `set`, `frozenset`
"""

x = 12
print(type(x))

x = "Hi"
print(type(x))

x = 23.34
print(type(x))

x = False
print(type(x))

True = 3

x = 17.6
y = int(x)
print(y)
print(type(y))

z = float(y)
print(z)
print(type(z))

ageS = input("What is your age? : ")
print(type(ageS))

ageN = int(ageS)
print(type(ageN))

print("You are born in year ", 2022-ageN)

Population = 8.3e7
print(Population)

str1 = "Hello"
str2 = 'Hi!'

print(type(str1))
print(type(str2))

mystr = "This character is a slash: /"
print(mystr)

mystr = "This character is a backslash: \\"
print(mystr)

# control character
mystr = "Hello! \tHow are you?"
print(mystr)

mystr = 'This character is a double quatation mark: " '
print(mystr)

mystr = "This character is a double quatation mark: \" "
print(mystr)

# three double/single quates for multiline string
Text = """لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است.
چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است و برای شرایط
فعلی تکنولوژی مورد نیاز و کاربردهای متنوع با هدف بهبود ابزارهای کاربردی می باشد. کتابهای زیادی در شصت
و سه درصد گذشته، حال و آینده شناخت فراوان جامعه و متخصصان را می طلبد تا با نرم افزارها شناخت بیشتری
را برای طراحان رایانه ای علی الخصوص طراحان خلاقی و فرهنگ پیشرو در زبان فارسی ایجاد کرد.
 در این صورت
می توان امید داشت که تمام و دشواری موجود در ارائه راهکارها و شرایط سخت تایپ به پایان رسد وزمان مورد نیاز
شامل حروفچینی دستاوردهای اصلی و جوابگوی سوالات پیوسته اهل دنیای موجود طراحی اساسا مورد استفاده قرار گیرد."""

print(Text)

mystr = "\xAA"
print(mystr)

print(len(Text))

"""## Operators
**Arithmatic Operators**
* Addition: `+`
* Subtraction: `-`
* Multiplication: `*`
* Division: `/`
* Integer division: `//`
* Integer division modulus: `%`
* Exponentiation: `**`
"""

print(3 + 5)
print(3 - 5)
print(3 * 5)
print(5 / 3)
print(5 // 3)
print(5 % 3)
print(5 ** 3)

"""**Assignment Operators**
* `+=`
* `-=`
* `*=`
* `/=`
* ...
"""

i = 5
i += 3
print(i)

"""**Comparison Operators**
* Equal: `==`
* Not equal: `!=`
* Greater than: `>`
* Less than: `<`
* Greater that or equal to: `>=`
* Less than or equal to: `<=`
"""

print(i < 5)

comp = i < 5
print(type(comp))

"""**Logical Operators**
* `and`
* `or`
* `not`
"""

print(5 < i < 10)

grade = 16
print(ageN < 40 and grade >= 17)
print(i > 5 and i < 10)

"""**Identity Operators**
* `is`
* `is not`
"""

x = 3.0
y = int(3)
print(x is y)

"""**Membership Operators**
(for strings and for sequence types)
* `in`
* `not in`
"""

print("e" in "Majid!")

"""**Bitwise Operators** (Advanced)
* `&` (bitwise AND)
* `|` (bitwise OR)
* `^` (bitwise XOR)
* `~` (bitwise NOT)
* `<<` (bitwise left shift)
* `>>` (bitwise right shift)
"""

# this shifts all bits of 4, one bit to the left
# that is 000100 becomes 001000
print(4 << 1)

# more on is
a = 23
b = 23
c = int(a)
d = a

print(a is b)
print(a is c)
print(a is d)

d = 3
print(a is d)

a = 3
b = 3.0
print (a==b)
print (a is b)

print(1.5 - .5 == 1.0)

print(1.9 - .9 == 1.0)